package base;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
//import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.common.io.Files;

import java.util.Date;

public class BaseClass {
	//code for properties file, this baseclass meant to be inherited by other classes.
	//parent class
	static File file;
	static Properties prop;
	static FileInputStream fip;
	static String filepath = System.getProperty("user.dir")+"//src/main/java//config//config.properties";
	public static  WebDriver driver;
	
	public static void initializeProp() {
		file = new File(filepath);
		try {
			fip = new FileInputStream(file);
			prop = new Properties();
			prop.load(fip);
		} catch (IOException e) {
			System.out.print("FileNotFoundException"+ e.getMessage());
		}
	}
	public static String readProperty(String key) {
		return prop.getProperty(key);
	}
	
	public void launchApp(String browser) {
		if(browser.toLowerCase().contains("chrome")) {
			System.setProperty("webdriver.chrome.driver", BaseClass.readProperty("ChromeDriverPath"));
			driver = new ChromeDriver();
		}else if(browser.toLowerCase().contains("firefox")) {
			System.setProperty("webdriver.gecko.driver", BaseClass.readProperty("FirefoxDriverPath"));
			driver = new FirefoxDriver();
		}
		
		driver.get(readProperty("ApplicationURL"));
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(100,TimeUnit.SECONDS);
		driver.manage().timeouts().pageLoadTimeout(100,TimeUnit.SECONDS);
		
		
	}
	
	public void closeApp() {
		driver.close();
	}
	
	public static String takeSnapshot(String fileName) throws IOException {
		TakesScreenshot srcshot = ((TakesScreenshot)driver);
		File srcFile = srcshot.getScreenshotAs(OutputType.FILE);
		String destfilepath = readProperty("SrcPath");
		DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy hh-m-ss");
        Date date = new Date(System.currentTimeMillis());
        String timestamp = dateFormat.format(date);
        String destination = destfilepath.concat(fileName).concat(timestamp).concat(".png");
		File destFile = new File(destination);
		FileUtils.copyFile(srcFile, destFile);
		return destination;
	}
	
	public void click(By key) {
		driver.findElement(key).click();
	}
	
	public static void print(String str) {
		System.out.println(str);
	}
	
	public static void waitUpto(int milis) {
		Date date = new Date();
		long until  = date.getTime()+ milis;
		 while (true) {
			 Date date1 = new Date();
			 long current = date1.getTime();
			 System.out.println(date1.getTime());
			 if(current == until) {
				 System.out.println("Time is up");
				 break;
			 }
		 }
	}
	
	public WebDriver getDriver() {
		System.setProperty("webdriver.chrome.driver", BaseClass.readProperty("ChromeDriverPath"));
		driver = new ChromeDriver();
		return driver;
	}
	

}
